import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { Header, Hero,Modal, Row } from 'src/components'
import { IMovie } from 'src/interfaces/app.interface'
import { API_REQUEST } from 'src/services/api.service'
import {useContext} from "react";
import {AuthContext} from "../context/auth.context";
import {useInfoStore} from "../store";


export default function Home({trending, topRated, tvTopRated, popular, documentary, family, history, comedy}:HomeProps): JSX.Element {
    const { modal} = useInfoStore()
    const {isLoading}= useContext(AuthContext)

    if (isLoading) return <>{null}</>;
  return (
    <div className={`relative min-h-screen ${modal && "!h-screen overflow-hidden"}`}>
      <Head>
        <title>Home - Jamshid</title>
        <meta name='description' content='Generated by create next app'/>
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <Header />
      <main className='relative pl-4 pb-24 lg:space-y-24 lg:pl-16'>
        <Hero trending = {trending}/>
        <section>
            <Row title='Top Rated' movies={topRated} isBig={false}/>
            <Row title='Tv Show' movies={tvTopRated} isBig={true}/>
            <Row title='Popular' movies={popular} isBig={false}/>
            <Row title='Documentary' movies={documentary.reverse()} isBig={false}/>
            <Row title='History' movies={history} isBig={false}/>
            <Row title='Family' movies={family.reverse()} isBig={false}/>
            <Row title='Comedy' movies={comedy} isBig={false}/>
        </section>
          {modal && <Modal/>}
      </main>
    </div>
  )
}

export const getServerSideProps:GetServerSideProps<HomeProps> = async()=>{
    const [trending, topRated, tvTopRated, popular, documentary, comedy, family, history] = await Promise.all([
        fetch(API_REQUEST.trending).then(res =>res.json()),
        fetch(API_REQUEST.top_rated).then(res=>res.json()),
        fetch(API_REQUEST.tv_top_rated).then(res=>res.json()),
        fetch(API_REQUEST.popular).then(res=>res.json()),
        fetch(API_REQUEST.documentary).then(res=>res.json()),
        fetch(API_REQUEST.comedy).then(res=>res.json()),
        fetch(API_REQUEST.family).then(res=>res.json()),
        fetch(API_REQUEST.history).then(res=>res.json())
    ])

  // const trending = await fetch(API_REQUEST.trending).then(res =>res.json());
  // const topRated = await fetch(API_REQUEST.top_rated).then(res=>res.json());
  // const tvTopRated = await fetch(API_REQUEST.tv_top_rated).then(res=>res.json());
  // const popular = await  fetch(API_REQUEST.popular).then(res=>res.json());
  // const documentary = await  fetch(API_REQUEST.documentary).then(res=>res.json());
  // const comedy = await  fetch(API_REQUEST.comedy).then(res=>res.json());
  // const family = await  fetch(API_REQUEST.family).then(res=>res.json());
  // const history = await  fetch(API_REQUEST.history).then(res=>res.json());



    return {
    props:{
      trending:trending.results,
      topRated:topRated.results,
      tvTopRated:tvTopRated.results,
      popular:popular.results,
      documentary:documentary.results,
      comedy:comedy.results,
      family:family.results,
      history:history.results,
    },
  };
};
  interface HomeProps{
    trending:IMovie[]
    topRated:IMovie[]
    tvTopRated:IMovie[]
    popular:IMovie[]
    documentary:IMovie[]
    comedy:IMovie[]
    family:IMovie[]
    history:IMovie[]

  }